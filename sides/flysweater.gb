#side Fly Swat w/Eater
Throws grenades, and uses a force field to make the target
come to the grenade. We thought of this idea long before the
game was implemented.

Oehpr: I updated the flyswatter a bit so that it at least works
somewhat... The eating mechanism is interesting. but it tends to
move the cluster around... It seems forcefield moves bots more
than manna. Maybe there's a way to keep the flyswatters clustered?
#author Warren
#color aaf
#type Fly Swatter
#color 946

#hardware
	processor 15
	constructor 0.99
	energy 150 0 ;c 15
	solar-cells 0.1 ;c
	armor 150

	robot-sensor 25
	grenades 50 25 80
	force-field .20 25

	food-sensor 17
	eater 1.1 ;c 40

#code
#var shot-arrive-time -1000
#vector target
#var start-food-move-time -10000
#vector food
#const food-move-interval 150
#const food-move-distance 0.8
#const cluster-period 120
#var cluster-time 0
do
	1 constructor-type!
	energy max-energy - 20 + constructor-rate!

	; = Fire Control =
	energy 40 > if
		time robot-sensor-time 50 + < grenades-cooldown or nif
			fire-robot-sensor sync
			robot-found if
				robot-velocity
				robot-distance 5 max grenades-speed / .75 * vs*
				robot-position v+ target! ; I've got my target
				target position v- rect-to-polar 2dup fire-grenade ; FIRE!!!!!
				drop grenades-speed / time + shot-arrive-time!
			then
		then
	then

	; = Distruption Control =
	time shot-arrive-time 25 - > ; The grenades almost there.
	time shot-arrive-time < and  ; The grenade hasn't landed
	robot-distance force-field-range < and ; we can mess with them
	if ; lets mess with them >:F
		; TODO, add focus so we don't switch targets?
		5 periodic-robot-sensor drop ; we need up to date telemetry
		robot-position
		robot-velocity time robot-sensor-time - vs* v+

		;now that we have robots current position, set forcefield on target
		2dup position v- rect-to-polar force-field-direction! force-field-distance!

		;we have to figure out angle and power still
		;where is the robot gonna be? and how off from target is that?
		robot-velocity shot-arrive-time time - vs* v+
		target v- ; difference from where we shot.
		rect-to-polar Pi + force-field-angle! 4 / force-field-power!
	else ;Food harvesting TODO: we got energy?
		; = Harvest Control =
		energy 15 > if
			17 food-sensor-focus-distance!
			random-angle food-sensor-focus-direction!

			food-move-interval periodic-food-sensor ;did we scan?
			food-found and                          ;did we find?
			food-distance 5 > and                   ;is it far?
			if
				food-position food!
				time start-food-move-time!
			then
			food position dist radius 1.05 * < if
				-10000 start-food-move-time! ;stop moving it it is close enough
			then
			start-food-move-time time food-move-interval - >
			food-found and if
				food position v- 2dup norm dup food-move-distance - radius force-field-radius + max swap / vs* 2dup
				position v+ food!
				rect-to-polar dup Pi +
				force-field-angle! force-field-direction! force-field-distance!
				force-field-max-power force-field-power!
			else
				0 force-field-power!
			then
		else
			0 force-field-power!
		then
	then
forever
#end

