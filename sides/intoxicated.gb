#side Tactical's Intoxicated
A goofy side designed to kill Economy-based sides before they get big by playing very agressivly at the begging of the game. Unfortuanly it has a tendancy to keep smashing sides untill it runs out of hull and explodes.

Things to note:
* Short Move, Think, Short Move mentality. Works quite well really.
* Waypoints, to insure that it covers the whole world
* Combination Blaster and Grenade gun. Origionaly just a joke, but it seems to work.
* Tanks do talk a little to each other
* Pulsing. The entire bot population "pulses" between combat and repiar/eat moods.
* Eating. THe robot goes for food even in combat, and while traveling



Problems:
* Combat Range keeping
* Grouping
* Retreating

#author Daniel Von Fange

http://www.braino.org/

#date 2002 10 7

#color 962000
#seed  1

#type Bubba

#color 000000

#hardware
processor 50
solar-cells .4
eater 4
engine .45
syphon 0

constructor 4
energy 500 300

armor 800
repair-rate .35

robot-sensor 17 1
food-sensor 6 1
shot-sensor 0 0

blaster 110 12 80
grenades 110 12 80

radio read write

#code
#vector home;
#vector currentDestination
#var dodgeDirection;
#var dodgeTimeout;
#var scanTimeout;
#var fear;
#var lastContactDirection
#var radarDist
#var numWaypoints
#var currentWaypoint
#var MOOD_EAT
#const CHAN_fightY 7
#const CHAN_fightX 8
#const CHAN_fightTime 9
#const CHAN_waypoint 11

;0 robot-sensor-sees-friends!
;1 robot-sensor-sees-enemies!
max-repair-rate repair-rate!
position home!

1 MOOD_EAT!
time 80 + scanTimeout!
robot-sensor-range .65 * radarDist!

;Waypoints
world-height radarDist - radarDist
world-height radarDist - radarDist
world-height radarDist - world-width radarDist -
radarDist world-width radarDist -
radarDist radarDist

stack 2 / numWaypoints!

think:

do
    calcFear^
    fireControl^
    
    time 2000 mod 1250 < if
        modeFight^
    else
        modeGrow^
    then
        
    energy 40 < if
        0 0 engine-velocity!
        0 repair-rate!
        do  energy 40 < while
            calcGrowing^
        loop
        else
        	max-repair-rate repair-rate!
        then
    
    position home v- angle  -.3 .3 random +  0 max-armor armor - 20 / random dodge^
    
        
    0 engine-power!
forever

eat:

	energy max-energy / .75 < MOOD_EAT or if
		gotoFood^
	
		food-position seek-location
		sync
		food-position seek-location
		do eaten while
			sync
			fireControl^
			calcGrowing^
			food-position seek-location
		loop
	
	
	
	else
		currentDestination position dist
		currentDestination food-position dist < ifr
		gotoFood^
	
	then
			
 
    return

gotoFood:
	do food-position position radius in-range until
		food-position seek-location
		fireControl^
		calcGrowing^
		sync
	loop
	return


;Takes a direction and duration to dodge
;This should be a short distance away
dodge:
    time + dodgeTimeout!
    dodgeDirection!
    engine-max-power engine-power!
    
    do time dodgeTimeout > until
        3 dodgeDirection polar-to-rect engine-velocity!
        calcGrowing^
        fireControl^
        sync
    loop
return

;Stolen from World Toad. Hope nobody minds. :)
fire:
  robot-velocity velocity v- 2dup ;2dup 2dup
  
    robot-distance blaster-speed / vs* robot-position v+   ;estimated target position
    position dist blaster-speed / vs* robot-position v+
  position v- rect-to-polar
  
    2dup drop blaster-range < if
        2dup fire-grenade fire-blaster drop 
    else
        2drop
    then 
  
return

calcGrowing:
    energy max-energy 20 - < if
        0 constructor-rate!
        1 constructor-type!
    else
        constructor-max-rate constructor-rate!
    then
    return

calcFear:
    armor  max-armor /
    energy max-energy /
    min
    2 /
    .5 -
    fear!
    return

calcOrders:
    return

fireControl:
	
    scanTimeout time > ifr
    energy max-energy / .1 < ifr
    
    time blaster-reload-time + 1 + scanTimeout!
    fire-robot-sensor
    ;fire-shot-sensor
    sync
    robot-found if
        blaster-cooldown not if
            ;robot-distance 
            fire^
            robot-position CHAN_fightX write CHAN_fightY write 
            time 175 + CHAN_fightTime write
        then
    then
    return
    
modeFight:
	0 MOOD_EAT!
	    robot-found if
       moodCombat^
    else
        sync
        food-found if
        	            eat^
                    then
        
        fear .3 <  time CHAN_fightTime read < and if
        	            CHAN_fightY read CHAN_fightX read currentDestination!
            currentDestination position v- angle
            -.3 .3 random + 10 13 random dodge^
            
        else
            moodPatrol^
        then
        fire-food-sensor
                    
    then
    
    energy max-energy 20 - < if
        fire-food-sensor
        then
        
    return
    
modeGrow:
	1 MOOD_EAT!
    robot-found if
        moodCombat^
    else
        sync
        food-found if
            eat^
        then
        
        fear .3 <  time CHAN_fightTime read < and if
            CHAN_fightY read CHAN_fightX read position v- angle
            -.3 .3 random + 10 13 random dodge^
        else
            0 2pi random 10 24 random dodge^
        then
        fire-food-sensor
            
    then
    
    energy max-energy 20 - < if
        fire-food-sensor
        sync
        food-found if
            eat^
            then
        then
    return
    
moodPatrol:
		CHAN_waypoint read currentWaypoint!
    currentWaypoint 2 * 2 + pick
    currentWaypoint 2 * 1 + pick
    currentDestination!
    currentDestination position v- angle 15 20 random dodge^
    currentDestination position 5 in-range if
    	currentWaypoint 1 + numWaypoints mod CHAN_waypoint write
    	then
    
    return
    
moodCombat:
	energy max-energy / .1 < ifr ; no power, no fight
	fear .2 < if
		robot-position robot-velocity 40 vs* v+ position dist
		blaster-range .7 * > if
			robot-direction 1 + 1 35 random dodge^
			robot-direction 1 - 1 25 random dodge^
		else
			robot-direction 2.0 + 20 30 random dodge^
			robot-direction 2.0 - 20 30 random dodge^
		then
	else
		robot-direction 2.0 + 15 19 random dodge^
		robot-direction 2.0 - 16 19 random dodge^
	then
	
	return

#end
