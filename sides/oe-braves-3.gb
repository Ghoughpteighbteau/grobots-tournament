#side OE Braves 3
#author oehpr

The Braves.

Single type Fighter
Passive Dodging
Food Nudging
Territory Control
Evasion on low energy

TODO's
	- Hunt enemies that hit us, but are outside sensor range
	- Bravery metric to determine who should attack
		- Braves out front, cowards in middle
		- Bravery boost when ganging up on target?
		- Cowardice allows for armor repair, could work?
	- reroll random dest when roll is outside bounds, instead of clamp
	- territory should be constant distance from center, polar coords, not average of units
		but move in more rapidly as we start winning.
	- Call to arms, swarming target, how to do? I don't want to send everyone, but then who responds?
		- Braves? Nearby? Maybe both? Ideally I'd just get 2 or 3 units every time.
	- Improve food capture
	- I just ran into the leach and I HATE IT
		- Do not shoot at shields that are too strong
		- Can we use some kind of system to identify how offensive a target is?
			- if we had that we can close in on vulnerable targets for more efficient kills.
	- there is a failure condition when we don't find any food, we all cower in the center
		of territory getting killed.
	- Food dodging in combat
		- I should move between detected food that is close to my target and actively eat it while fighting

#seed 1
#color 746
#type Brave
#hardware
	processor 20 0
	robot-sensor 12
	blaster 17 11 12
	engine .15
	energy 300 80
	solar-cells .02
	armor 220
	food-sensor 5 1
	constructor 0.8
	eater 1.1
#decoration 999 x
#code
#const jink-period 3
#const wander-time 12
#const construction-gap 120
#const territory-factor 60
#const robot-sensor-period 80
#const food-sensor-period 40
#const runaway-energy 50

#vector dest
#vector jink 0 0
#var prev-armor
#var damaged 0
#var engage-dist
#var jink-timer 0

new-dest:
	1 vread                          ; territory center
	2dup position v-                 ; difference from center
	1 type-population vs/            ; move territory by portion of pop
	v- 2dup 1 vwrite
	1 type-population territory-factor * sqrt      ; territory radius
	random-angle
	polar-to-rect
	v+
	swap world-width 3 - min 3 max
	swap world-height 3 - min 3 max

	dest!
	return

wait: ;<time>
	do
		sync sync sync sync
	1 - dup while-loop drop
	return

nav: ;<aggression> <target>
	position v-
	velocity 10 vs* v-
	2dup engine-velocity!
	norm * engine-power!
	return

con-logic:
	1 constructor-type!
	energy max-energy - construction-gap +
	energy constructor-remaining - runaway-energy - ; if I can get this baby done, I should do it.
	max constructor-rate!
	return

#start
armor prev-armor!

blaster-range 2 - engage-dist!
position 1 vwrite
new-dest^

; States
wander:
	con-logic^
	new-dest^
	dest position v- engine-velocity!
	0.3 engine-power!
	wander-time wait
	seek& jump

seek:
	energy 5 < if
		0 engine-power!
		15 wait^
	then
	con-logic^
	dest position v- engine-velocity!
	0.03 engine-power!

	prev-armor armor > damaged!
	armor prev-armor!
	damaged attack& ifg

	food-sensor-period periodic-food-sensor drop
	food-found defend& ifg

	robot-sensor-period periodic-robot-sensor drop
	robot-found attack& ifg

	prev-armor armor > damaged!
	armor prev-armor!
	damaged wander& ifg

	sync sync
	dest position dist 5 > seek& ifg

	new-dest^
	seek& jump

defend:
	con-logic^

	prev-armor armor > damaged!
	armor prev-armor!
	damaged attack& ifg

	robot-found not robot-sensor-period * blaster-reload-time +
	periodic-robot-sensor robot-found and if
		1 vread robot-position dist ; how deep target is in territory
		1 type-population territory-factor * sqrt ; how large territory is
		< attack& ifg
		robot-position robot-velocity lead-blaster
	then

	sync
	velocity -0.1 vs* engine-velocity!
	eaten defend& ifg
	0.05 food-position nav^
	friendly-collision wander& ifg
	position food-position dist radius > defend& ifg
	seek& jump

attack:
	0 constructor-rate!
	energy runaway-energy < runaway& ifg

	blaster-reload-time periodic-robot-sensor robot-found and if
		robot-position robot-velocity lead-blaster
		robot-position dest! ; check out the corpse when it dies
	then

	robot-found wander& nifg

	robot-position position v-
	2dup unitize engage-dist vs* v-    ; keep some distance
	robot-velocity 7 vs* v+ ; compensate for target velocity
	velocity 7 vs* v-       ; compensate for our velocity

	time 8 / cos ;jink
	1 *
	robot-direction pi/2 +
	polar-to-rect v+

	2dup engine-velocity!
	norm 0.3 * engine-power!
	sync

	attack& jump

runaway: ;crap crap crap
	0 constructor-rate!
	1 1 vread nav
	10 wait^
	seek& jump

seek jump
#end
